#!/usr/bin/env bash
# runs all bleanser jobs
# if modules are passed as positional args
# filters to only run those jobs
#
# can pass -n to run a dry run

set -o pipefail
set -e

modname() {
	if [[ "$1" == *.* ]]; then
		echo "$1"
	else
		echo "bleanser_pura.modules.$1"
	fi
}

main() {
	local -a filter=()
	local -a sort_types=()
	local dry_run=0
	local removed_dir="${HOME}/.cache/removed"
	mkdir -p "$removed_dir"
	while getopts "nt:" OPT; do
		case "$OPT" in
		t)
			if [[ "$OPTARG" == 'name' ]] || [[ "$OPTARG" == 'size' ]]; then
				sort_types+=("$OPTARG")
			else
				printf 'Unknown sort type (must be "sort" or "name"): %s\n' "$OPTARG" >&2
			fi
			;;
		n)
			dry_run=1
			;;
		*)
			printf 'Unknown arg: %s\n' "$OPTARG" >&2
			;;
		esac
	done
	shift "$((OPTIND - 1))"
	for arg in "$@"; do
		filter+=("$(modname "$arg")")
	done
	((${#sort_types[@]} == 0)) && sort_types+=("size" "name")
	mkdir -p "${removed_dir}"
	for sort_type in "${sort_types[@]}"; do
		prune_module() {
			local module
			local -a args=(--move "${removed_dir}" --yes --sort-by "${sort_type}")
			module="$(modname "${1?pass module name}")"
			shift
			if ((${#filter[@]} > 0)); then
				if ! (IFS=' ' echo "${filter[*]}") | tr ' ' '\n' | grep -xq "$module"; then
					printf 'Skipping %s, does not match filter\n' "$module"
					return 0
				fi
			fi
			args+=("$@")
			if ((dry_run)); then
				echo python3 -m "${module}" prune "${args[@]}"
			else
				python3 -m "${module}" prune "${args[@]}" || return $?
			fi
		}

		prune_module bleanser.modules.reddit ~/data/rexport/ || return $?
		prune_module grouvee ~/data/grouvee --prune-dominated --multiway || return $?
		prune_module zsh ~/data/zsh_history --prune-dominated --multiway || return $?
		prune_module bash ~/data/bash --prune-dominated --multiway || return $?
		prune_module bash ~/data/bash_history --prune-dominated --multiway || return $?
		prune_module ipython ~/data/ipython_default --prune-dominated --multiway || return $?
		prune_module ipython ~/data/ipython_calculator/ --prune-dominated --multiway || return $?
		prune_module cstimer ~/data/cubing/cstimer --prune-dominated --multiway || return $?
		prune_module twistytimer ~/data/cubing/cubers_io --prune-dominated --multiway || return $?
		prune_module twistytimer ~/data/cubing/phone_twistytimer --prune-dominated --multiway || return $?
		prune_module smscalls --glob ~/data/SMSBackups/'sms-*' --prune-dominated --multiway || return $?
		prune_module smscalls --glob ~/data/SMSBackups/'calls-*' --prune-dominated --multiway || return $?
		prune_module chess --glob ~/data/chess/'chessdotcom_2*' --prune-dominated --multiway || return $?
		prune_module chess --glob ~/data/chess/'lichess_2*' --prune-dominated --multiway || return $?
		prune_module trakt --glob ~/data/trakt/'2*' --prune-dominated --multiway || return $?
		prune_module activitywatch --glob ~/data/aw-window/phone/'*.json*' --prune-dominated --multiway || return $?
		prune_module listenbrainz --glob ~/data/listenbrainz/'2*' --prune-dominated --multiway || return $?
		# running mal_zips by size doesn't work well, as it removes newer, smaller exports (since history size has shrunk)
		if [[ "$sort_type" == 'name' ]]; then
			((dry_run)) || {
				if wait-for-internet --timeout 10; then
					python3 -m malexport recover-deleted approved-update || true
				fi
			}
			find "${HPIDATA}/malexport_backups" -mindepth 1 -type d -print0 | while read -r -d $'\0' username; do
				prune_module mal_zips --glob "${username}"/'*.zip' --prune-dominated --multiway || return $?
			done
		fi
	done
	hash dust && {
		((dry_run)) || dust -c "$removed_dir"
	}
}

main "$@" || exit $?
